#title(`STX Documentation`)

<toc(title:`Table of Contents`)>

= STX

STX is a markup language for creating documents.
It is designed to be simple enough to be easily read and written but at the 
same time powerful enough to allow creating complex documents.

A document in STX is generated by a single self-describing text file;
the [output format] and [document meta-data] is embedded in the file.
External content can be included from other resources using [directives].

Despite part of the syntax is based on Markdown and AsciiDoc, STX is not an 
extension. In order to achieve advanced features, most of the [syntax] is 
different and *stricter*.

= Features

Most of the features are oriented to help to create technical and academic
documents.

== Structured Documents

The text written in STX generates documents represented by a hierarchycal 
component structure described in the [Document Model] section.

Building a document using components makes it possible to have ""inifite""
nesting and the option to render it to multiple [output formats].

@ref(`nesting rules`)
Nesting rules are based on the text alignment. Whenever there is [block mark], 
the content can be nested following the aligment of the subsequent text. 
The content can be broken just by breaking the alignment or by using a `%` 
(percentage symbol).

+++ code:stx
|= Column 1 | Column 2
|- Cell     | - Nested list (item 1).
              - Item 2 with nested code block.
                +++ code
                This is nested in item2.
                +++
+++
:^ Example of nested components.

== Cross References

Since the STX documents are structured, cross references are easy to 
generate and validate. Text between brackets are considered links, the 
target reference can be customatized by appending it between parenthesis 
Broken references are validated generating a warning.

+++ code:stx
[Simple link]
[Link with explicit reference](this the reference)
[External link](http://www.example.com)
+++
:^ Different ways to create links.

The matching algorithm for validating references ignores the case and only 
considers words using ASCII letters and numbers. 
A reference like `\[this]` is equivalent than `\[THIS]`.

Only [sections] are automatically referenceable by using the heading text,
if a section attempts to create duplicated references, the algorithm
starts appending a number.

Custom references are supported by adding the `ref` attribute to any 
component.

+++ code:stx
@ref(`other options`, `more options`)
- Other option 1.
- Other option 2.

Please see [other options], it also works with [more options].
+++
:^ Custom references.

== Numbering

Since the documents in STX are organized by sections, they can be easily 
numbered. Each section, figure and table are automatically numbered.

Additionally, there is a function for generating a [Table of Contents].
All numbers of sections, figures and tables of this document were 
auto-generated as well as the table of contents.

@ref(`output format`)
== Output Formats

While develop a new output format is not a trivial task, 
STX is designed to be modular so that the output formats can be plugged in. 
The current supported output formats are described in this section.

Since STX document are stand-alone, the output format is specified by using
directives in the same document. A document can have any number of output
formats.

=== HTML

This output format generates one single HTML5 file. The document structure 
is completely based on the [HTMLBook](https://oreillymedia.github.io/HTMLBook/) 
specification, a great unofficial draft from O’Reilly Media, Inc.

+++ code:stx
#output(format: html, target: index.html)
+++
:^ Specifying the HTML output format in a document.

Since this is the main format for rendering STX documents, some directives
are optimized for HTML, example:

+++ code:stx
#stylesheets(
    assets/layout.css,
    assets/style.css
)
+++
:^ Linking CSS stylesheets in a document.

Another useful feature for creating HTML documents is the `embed` function,
which integrates the content from another file directly in the document.

+++ code:stx
<embed(assets/layout.html)>
+++
:^ Embedding an HTML fragment into the document.

=== JSON

This output format generates a JSON file with the raw structure of the 
document. This format is not optimized for human reading but can be useful
for debugging and using it with other tools.

+++ code:stx
#output(format: json, target: index.json)
+++
:^ Specifying the JSON output format in a document.

= Syntax

The STX syntax is stricter than other markup languages. 
Having a malformed component will cause a compilation error.

Since this is a markup language as well, the marks in the text together 
with the text alignment makes it possible to create complex documents.
This section describes the different types of marks and its syntax.

== Block Components

This type of components are able to contain more components inside, 
they are the building blocks for a document.

Block marks are not recognized inside inline content, consequently,
paragraphs cannot begin with a block mark.

When several block components are defined sequentially, they can even be
considered as a single composite component.

=== Sections

There are 6 levels of sections, they can be created by repeating the `=` 
(equal symbol). The number of symbols represents the level of the section.
The content of the section must be aligned with the section mark.

{{{ code
\=== [Heading Content](block-components)

[Section Content](block-components)
}}}
:^ Section syntax.

Compared with other markup languages, sections here are not just titles, 
they contain all subsequent components *until a section with a level equal 
or less is found*.

+++ code:stx
= Section A (1.)
== Section B (1.1, inside A)
=== Section C (1.1.1, inside B)
=== Section D (1.1.2, inside B)
=== Section E (1.1.3, inside B)
== Section F (1.2, inside A)
=== Section G (1.2.1., inside F)
=== Section H (1.2.2, inside F)
= Section I (2.)
== Section J (2.1, inside I)
== Section K (2.2, inside I)
+++
:^ Example of nested sections.

=== Lists

There are two kind of lists: unordered and ordered, they can be created by
using the `-` (dash symbol) and `.` (period symbol) respectively.

{{{ layout:row

{{{ code
\- [Item 1 Content](block-components)
\- [Item 2 Content](block-components)
\- [Item N Content](block-components)
}}}
:^ Bulleted list syntax.

{{{ code
\. [Item 1 Content](block-components)
\. [Item 2 Content](block-components)
\. [Item N Content](block-components)
}}}
:^ Numbered list syntax.

}}}

The content of the items can be any supported component as long as the 
[nesting rules] are followed.

=== Tables

Tables are created by gathering rows, the mark for heading rows is `|=` 
(pipe and equal symbols) and for normal rows is `|-` (pipe and dash symbol). 

The content of a row represents a cell, more cells can be added to the row 
by using the `|` (pipe symbol), this cell mark can be used inline, in other 
words, multiple cells can be defined in a single line.

{{{ code
\|= [Heading 1 Content](block-components) | Heading 2 Content | Heading N Content
\|- [Cell 1,1 Content](block-components)  | Cell 2,1 Content  | Cell N,1 Content
\|- [Cell 1,2 Content](block-components)  | Cell 2,2 Content  | Cell N,2 Content
\|- [Cell 1,N Content](block-components)  
    | Cell 2,N Content
    | Cell N,N Content
}}}
:^ Table syntax.

{{{ info
The number of cells per row is not required to match.
}}}

=== Captions

Captions are not components _per se_, they are used to create or change 
other components:

- When using captions with tables, the caption becomes part of the table.
- Captions used with any other component creates a figure, the other component
  gets wrapped by the figure.

There are two ways to apply a caption to a component:

- *Before the component*: They are created by using `::` (two colon symbols)
  and must be placed before the target component at the same aligment.
- *After the component*: They are created by using `:^` (colon and caret 
  symbols) and must be placed after the target component at the same aligment.

{{{ layout:row

{{{ code
\:: [Caption Content](block-components)

[Target Component](block-components)
}}}
:^ Pre-caption syntax.

{{{ code
[Target Component](block-components)

\:^ [Caption Content](block-components)
}}}
:^ Post-caption syntax.

}}}

=== Literal Block

This component is allowed to contain raw text which won't be parsed by STX. 
The text must be delimited by `+++` (three plus symbols); one line before
and one line after.

+++ code:stx
\+++
This text is not parsed by *STX*, so it _should_ be rendered as it is.
\+++
+++
:^ Simple literal component.

Optionally, the raw text can be processed by a function to decorate it or
create a richer component.
The function must be inditacted by an [entry] right after the first `+++` 
mark (there can by any amount of spaces in between).

+++ code:stx
\+++ code:js
console.log('Hello world!');
\+++
+++
:^ Code block component produced by a processed literal.

{{{ information
See the [functions] sections for more details.
}}}

@ref(`capturing blocks`)
=== Capturing Block

This component creates a group of components which can be processed by a
function to decorate them or create a richer component. The commponents
must be delimited by `\{{{` (three left curly braces) and `}}}` (three
right curly braces)
; one line before 
and one line after, the function must be inditacted by an [entry] right 
after the first `\{{{` mark (there can by any amount of spaces in between).

+++ code:stx
{{{ information
This text will be shown as an information admonition.
}}}
+++
:^ Admonition box produced by a captured paragraph.

{{{ information
See the [functions] sections for more details.
}}}

=== Content Breaks

Any block component can be broken by using `%` (percentage symbol).

+++ code:stx
= Section A

== Section B

Content of section B. Next block mark will break this section.

% 

This content now is inside the Section A.
+++
:^ Section content broken.

=== Paragraphs

Any other sequence of characters that doesn't match with a [block mark] is
considered a paragraph. The paragraphs are composed by a sequence of 
[inline components] and are broken by an empty line.

+++ code:stx
This is the paragraph #1.

This is the paragraph #2.
This line is part of the paragraph #2.
+++
:^ Two paragraphs.

== Inline Components

=== Rich Text

There are some delimiter marks that can decorate the surrounded inline 
content for producing richer components. 
These marks can be nested as any other component in STX.

:: Supported delimited text components.
|= Mark | Description | Example
|- `\*` (asterisk symbol)     
   | Strong text: normally rendered as bold text.
   | `Note: \*This\* is important!`
|- `\_` (underscore symbol)   
   | Emphasized text: normally rendered as cursive text.
   | `A.K.A text in \_italics\_.`
|- `\`` (grave accent symbol) 
   | Code sample text: normally rendered with a monospace typography.
   | `HTML uses the \`\<code>\` tag.`
|- `\~~` (two tilde symbols)
   | Strikethrough text: normally rendered with a horizontal line through 
     its center.
   | `Use \~~one\~~ two tilde symbols.`
|- `\""` (two double quotes symbol) 
   | Inline typographic quotation primary marks: the text is surrounded 
     with `“` and `”`.
   | `\""Primary\"" marks.`
|- `\''` (two single quotes symbol) 
   | Inline typographic quotation secondary marks: the text is surrounded
     with `‘` and `’`.
   | `\''Secondary\'' marks.`

=== Links

Links can create cross references for internal targets or hyperlinks for
the external ones. In order to create a link, the inline content must be
surrounded by `\[` (left square bracket symbol) and `]` (right square 
bracket symbol), optionally, the target reference surrounded
by parenthesis should be appended immediately after the right bracket.

+++ code:stx
[Inline link with implicit reference.]
[Inline link.](with explicit reference)
+++
:^ Different ways to create links.

=== Symbols

There are some combinations of characteres that generate specific symbols:

|= Character Sequence            | Symbol
|- `\...` (three period symbols) | `...` (ellipsis)

=== Inline Capturing

Similar to the [capturing blocks], inline content can be captured as well
by surrounding it with `\{` and `}` (left and right brace symbols).
Captured text doesn't change too much by itself, it only gets grouped
and the rendered result is normally the same.

+++ code:stx
""Light My Fire"" is a song by {the American rock band *the Doors*}.
+++
:^ The captured text is `the American rock band \*the Doors\*`.

In order to generate richer content, the captured content can be processed 
by appending a [function call] immediately after the `}` (right brace 
symbol).

=== Function Call

To create a function call, an [entry] must be surrounded with `\<` and `>`
(left and right angle bracket symbols). Functions calls can receive 
captured content and the arguments indicated in the entry.

The name of the entry indicates the function and the value are the 
direct arguments. Captured content can be passed as argument by putting it
immediately before of a function call.

+++ code:stx
Click on the folder icon (<img: folder.png>).

Links are highlighted with {red}<color:#FF0000>.
+++
:^ Different ways to create function calls.

== Attributes

All components can receive arguments, they are used mainly for changing how
it is rendered or just to provide meta information. 

The arguments must be specificed before the component and are created with
a `@` (at symbol) followed by an [entry]. The entry represents the name and
value of the attribute.

+++ code:stx
@type:appendix
= Appendix Title

Appendix content
+++
:^ Section marked as an appendix by using attributes.

The attributes which can accept all components are described in the table
below.

:: Global attributes for components.
|= Attribute | Accepted Values | Description
|- `ref`     
   | [Token] or [Group] of tokens.
   | Defines how the component can be referenced by [links].

== Directives

Directives are instructions for the STX compiler, they are created by using
a `#` (number sign) followed by an [entry] representing the name and 
arguments of the directive.

Unlike functions, that produce a component and are evaluated after the 
document is parsed, directives are evaluated immediately when they are 
found in the document and doesn't necessarily produce components.

=== Include Directive

Accepts a [Token] or a [Group] of tokens, the tokens represent the files
which are going to be included where the directive was placed.

The specified files are relative to the current STX file, if the arguments 
contain a folder, the entire content of the folder is included recursively.

+++ code:stx
#include(appendix.stx)

#include(appendix.stx, glossary.stx)
+++
:^ Include examples.

=== Output Directive

Indicates the output format after processing the document. Accepts 
following arguments:

- `format`: Built-in values are `html` and `json`.
- `target`: The file where the document should be generated.
- `options`: Format-specific options.

+++ code:stx
#output(format: html, target: ./index.html)
+++
:^ Output directive example.

=== Stylesheet Directive

This directive exists because HTML and other formats supports the use of 
stylesheets. It accepts a [Token] or a [Group] of tokens representing the
stylesheet files.

+++ code:stx
#stylesheets(
    assets/layout.css,
    assets/style.css
)
+++
:^ Stylesheets directive example.

=== Meta-data Directives

There are some directives for defining document attributes, these values
are not necessarily rendered in the document.

- `title`: Defines the title of the document.
- `author`: Defines the author of the document.
- `encoding`: Defines the encoding of the document.

+++ code:stx
#title(`STX Documentation`)
#author(`Sergio Pedraza`)
#encoding(`UTF-8`)
+++
:^ Meta-data directives example.

= Functions
== Code
== Images
== Embed Content
== Table of Contents
== Admonitions
== Other


= Data Syntax

== Token


== Entry


== Group



#stylesheets(
    assets/layout.css,
    assets/style.css
)

<embed(assets/layout.html)>

#output(format: html, target: ./index.html)
